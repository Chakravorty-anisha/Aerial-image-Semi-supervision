# -*- coding: utf-8 -*-
"""preprocess.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FjkbOAwO-Qu2jeip6VXTqjfioLlNtI9J
"""

# data_processing.py
GT_DIR = 'path to the masks'
IMG_DIR = 'path to the labelled images'
IMG_SIZE1 = 256
IMG_SIZE2 = 256

def get_image_paths(dir):
    return sorted([dir + path for path in listdir(dir)])

def load_and_preprocess_image(path):
    img = Image.open(path)
    imarray = np.array(img, dtype='float')
    if imarray.shape[0] != IMG_SIZE1 or imarray.shape[1] != IMG_SIZE2:
        nimg = img.resize((IMG_SIZE1, IMG_SIZE2))
        nimarray = np.array(nimg, dtype='float')
        nimarray /= 255.0
        return tf.convert_to_tensor(nimarray)
    imarray /= 255.0
    return tf.convert_to_tensor(imarray)

def load_and_preprocess_mask(path):
    img = tf.io.read_file(path)
    img = tf.image.decode_jpeg(img, channels=3)
    return img

def load_and_preprocess_segment(path):
    seg = np.array(load_and_preprocess_mask(path))
    mask = np.zeros((IMG_SIZE1, IMG_SIZE2, len(colors)), dtype=np.uint8)
    for i, color in enumerate(colors):
        cmap = np.all(np.equal(seg, color), axis=-1)
        mask[:, :, i] = cmap * 1
    return tf.convert_to_tensor(mask)