# -*- coding: utf-8 -*-
"""ssim_evaluation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TXyfW94jUOmhLxCGumwwQPdueA_g78OE
"""

import os
import numpy as np
from scipy import signal
from tensorflow.keras.models import load_model
from ssim_calculator import calculate_ssim
from shutil import copyfile

def evaluate_ssim(model_path, dataset, target_names, threshold_multiplier=0.5, save_folder_source=None, save_folder_target=None):
    model = load_model(model_path)

    [X1, X2] = dataset
    l = len(X1)

    IOU_GeneratedMask = {}
    ssim_values = []

    for i in range(l):
        ix = np.array(i)
        ix = ix.reshape((1,))

        src_image, tar_image = X1[ix], X2[ix]
        gen_image = model.predict(src_image)

        gen_image = (gen_image + 1) / 2.0
        tar_image = (tar_image + 1) / 2.0

        file_name = target_names[i]

        # Calculate SSIM using the modularized function
        ssim_value = calculate_ssim(tar_image.squeeze(), gen_image.squeeze())
        ssim_values.append(ssim_value)

    # Calculate the mean and standard deviation of SSIM values
    ssim_mean = np.mean(ssim_values)
    ssim_std = np.std(ssim_values)

    for i in range(l):
        ssim_value = ssim_values[i]
        file_name = target_names[i]

        # If SSIM is greater than the threshold, save images
        if ssim_value > threshold_multiplier * ssim_mean + ssim_std and \
           save_folder_source is not None and save_folder_target is not None:
            # Create folders if they don't exist
            os.makedirs(save_folder_source, exist_ok=True)
            os.makedirs(save_folder_target, exist_ok=True)

            # Define file paths for saving
            source_save_path = os.path.join(save_folder_source, file_name)
            target_save_path = os.path.join(save_folder_target, file_name)

            # Save source and target images
            copyfile(file_name, source_save_path)
            copyfile(file_name, target_save_path)

        IOU_GeneratedMask[file_name] = ssim_value

    return IOU_GeneratedMask

# Example usage
if __name__ == "__main__":
    model_path = 'path_to_your_trained_model.h5'
    dataset_test = # Load your test dataset
    tar_images_names_test = # Load the corresponding target names
    threshold_multiplier = 0.5
    save_folder_source = "path/to/save/source_images"
    save_folder_target = "path/to/save/target_images"

    ssim_results = evaluate_ssim(model_path, dataset_test, tar_images_names_test,
                                  threshold_multiplier, save_folder_source, save_folder_target)
    print(ssim_results)