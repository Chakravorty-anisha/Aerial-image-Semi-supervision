# -*- coding: utf-8 -*-
"""main_script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q8y9TOn9eHKoz_pxqrpBJMnmXLzX2BQc
"""

from generator import define_unet_resnet50
from discriminator import define_discriminator
from gan import define_gan
from utils import generate_real_samples, generate_fake_samples, summarize_performance

from data_loader import load_mask_names, load_image_names, load_masks, load_images, preprocess_data

# Define paths and variables
path_train_images = "path to images"
path_train_masks = "path to masks"
IMG_SIZE1, IMG_SIZE2 = 256, 256

# Load image and mask names
tar_images_names = load_image_names(path_train_images)
src_images_names = load_mask_names(path_train_masks)

# Load images and masks
tar_images = load_images(path_train_images, tar_images_names)
src_images = load_masks(path_train_masks, src_images_names)

# Preprocess data
data = [tar_images, src_images]
dataset = preprocess_data(data)


# Define ResNet50 model without top layers for the generator
resnet_model = ResNet50(weights='imagenet', include_top=False, input_shape=image_shape)

# Create generator model
generator_model = define_unet_resnet50(resnet_model, image_shape)

# Create discriminator model
discriminator_model = define_discriminator(image_shape)

# Define GAN model
opt = Adam(learning_rate=0.0002, beta_1=0.5)
gan_model = define_gan(generator_model, discriminator_model, image_shape, opt)

# Train the GAN
train(discriminator_model, generator_model, gan_model, dataset, n_epochs=50, n_batch=1)