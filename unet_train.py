# -*- coding: utf-8 -*-
"""unet_train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OHhvsbFaDzsSXLadIA7qNYuFdmb9D8lQ
"""

# train_unet.py
from imports import *
from preprocessing import *
from I2m import *
from operations import *

def train_unet():
    # Load or create your U-Net model
    my_new_model_with_resnet50 = new_model_with_resnet50_encoder()

    # Define your directories
    GT_DIR = 'mask path'
    IMG_DIR = 'training image path'

    # Load training masks and preprocess them
    gt_train_paths = get_image_paths(GT_DIR )
    gt_train_ds = list(map(load_and_preprocess_segment, gt_train_paths))
    gt_train_ds = tf.data.Dataset.from_tensor_slices(gt_train_ds)

    # Load and preprocess training images
    im_train_ds = tf.data.Dataset.from_tensor_slices([load_and_preprocess_image(i) for i in get_image_paths(IMG_DIR)])

    # Combine image and mask datasets for training
    BATCH_SIZE = 8
    AUTOTUNE = tf.data.experimental.AUTOTUNE
    train_ds = tf.data.Dataset.zip((im_train_ds, gt_train_ds))
    train_ds = train_ds.cache().batch(BATCH_SIZE).prefetch(buffer_size=AUTOTUNE)

    # Load validation masks and preprocess them
    gt_val_paths = get_image_paths(GT_VAL_DIR)
    gt_val_ds = list(map(load_and_preprocess_segment, gt_val_paths))
    gt_val_ds = tf.data.Dataset.from_tensor_slices(gt_val_ds)

    # Load and preprocess validation images
    im_val_ds = tf.data.Dataset.from_tensor_slices([load_and_preprocess_image(i) for i in get_image_paths(IMG_VAL_DIR)])

    # Combine image and mask datasets for validation
    val_ds = tf.data.Dataset.zip((im_val_ds, gt_val_ds))
    val_ds = val_ds.cache().batch(BATCH_SIZE).prefetch(buffer_size=AUTOTUNE)

    # Specify the number of epochs and other training parameters
    epochs = 100

    # Train the model
    history = my_new_model_with_resnet50.fit(train_ds, epochs=epochs, validation_data=val_ds)

    # Save the trained model
    save_model(my_new_model_with_resnet50, 'path to store model')

    # Optional: Visualize training history
    visualize_training_history(history)

if __name__ == "__main__":
    train_unet()